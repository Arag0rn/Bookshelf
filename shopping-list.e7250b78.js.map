{"mappings":"I,E,E,E,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,O,E,E,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E","sources":["<anon>","src/shopping-list.js","src/js/shopping-list.js"],"sourcesContent":["(function () {\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\nparcelRequire(\"2Z7mb\");\nparcelRequire(\"cs7FV\");\nparcelRequire(\"bOkP4\");\nparcelRequire(\"18VO4\");\n\n // import { getAuth, onAuthStateChanged } from \"firebase/auth\";\n // import { getDatabase, ref, get, post, child, push, update, forceLongPolling } from \"firebase/database\";\n // const auth = getAuth();\n // onAuthStateChanged(auth, (user) => {\n //   if (user) {\n //     // User is signed in, see docs for a list of available properties\n //     // https://firebase.google.com/docs/reference/js/auth.user\n //     const uid = user.uid;\n //     const email = user.email;\n //     const photoURL = user.photoURL;\n //     const emailVerified = user.emailVerified;\n //       readBookData(uid)\n //       serviceBooks(uid);\n //     // ...\n //   } else {\n //     // User is signed out\n //     // ...\n //   }\n // });\n // function readBookData(userId) {\n //   const dbRef = ref(getDatabase(), `users/${userId}/books`);\n //   get(dbRef).then((snapshot) => {\n //     if (snapshot.exists()) {\n //       const booksData = snapshot.val();\n //         console.log((Object.values(booksData)));\n //         return booksData\n //     } else {\n //         console.log(\"No shopping list data available\");\n //         return null\n //     }\n //   }).catch((error) => {\n //     console.error(error);\n //   });\n // }\n // const refs = {\n //     defaultPage : document.querySelector('.default-message'),\n //     showElement: document.querySelector('.js-container'),\n //     shopLink: document.querySelector('.shopping-link')\n // }\n // async function serviceBooks(userId) {\n //     try {\n //         const BASE_URL = 'https://books-backend.p.goit.global/books/'\n //          const { data: bookIds } = await readBookData(userId);\n //           if (!bookIds || bookIds.length === 0) {\n //       refs.defaultPage.classList.remove('.hidden');\n //       return; \n //     }\n //             const books = []\n //      for (const bookId of bookId) {\n //         const { data } = await axios.get(`${BASE_URL}${id}`)\n //         books.push(bookData)\n //          refs.defaultPage.classList.add('.hidden')\n //          refs.showElement.insertAdjacentElement(\"beforeend\",createMarkup(books))\n //    }       \n //     }\n //     catch (error) {\n //         console.log(error.message)\n //         throw new Error(error.message, 'Something went wrong')\n //    }\n // }\n // // console.log(serviceBooks());\n // function createMarkup(arr) {\n //     return arr.map(({book_image,title,description,author,buy_links: { name, url},_id}) => {\n //         return `               \n //         <div class=\"main\">\n //         <ul class=\"list-cards\">\n //             <li class=\"js-item list-item\">\n //                 <div class=\"image-container\">\n //                     <img src=\"${book_image}\" alt=\"${title}\" id=\"${_id}\">\n //                 <div class=\"quick-view\">\n //                      Quick View\n //             </div>\n //                 </div>  \n //                 <div class=\"content-container\">\n //                     <h2 class=\"card-title\">${title}</h2>\n //                     <p class=\"card-text\">${description}</p>   //тут має бути категорія\n //                     <p class=\"main-card-text\">${description}</p>\n //                     <p class=\"text-author\">${author}</p>\n //                      <button type=\"button\" class=\"btn-delete\">\n //                         <svg class=\"icon-trash\">\n //                             <use href=\"./images/icons.svg#icon-trash\"></use>\n //                           </svg>\n //                         </button>  \n //                      </div>\n //             </li>\n //         </ul>\n //                 <ul class=\"list-icons\">\n //                 <li class=\"item-images\">\n //                     <a href=\"${url}\" class=\"item-link\">\n //                         <img src=\"./images/png_amazon.png\" alt=\"${name}\">\n //                         <span class=\"underline\"></span>\n //                     </a>\n //                 </li>\n //                 <li class=\"item-images\">\n //                     <a href=\"${url}\" class=\"item-link\">\n //                         <img src=\"./images/pngyellow.png\" alt=\"${name}\">\n //                         <span class=\"underline\"></span>\n //                     </a>\n //                 </li>\n //                 <li class=\"item-images\">\n //                     <a href=\"${url}\" class=\"item-link\">\n //                         <img src=\"./images/pngbook.png\" alt=\"${name}\">\n //                         <span class=\"underline\"></span>\n //                     </a>\n //                 </li>\n //             </ul>\n //         </div> `\n //     }).join('')\n // }\n // fetch('https://books-backend.p.goit.global/books/643282b1e85766588626a0ae').then(resp => resp.json()).\n // then( data => {\n //     console.log(data)\n //     createMarkup(data)\n // }).\n // catch(err => console.log(err))\n //* При переході на сторінку Shopping list у блоці з переліком книг відмальовуються книги,\n //* що були додані до нього користувачем і зберігалися\n //* у localStorage.Якщо таких книг не знайдено, необхідно показати відповідне повідомлення користувачу\n\n\nparcelRequire(\"cfOGF\");\nparcelRequire(\"euqRf\");\nparcelRequire(\"2Q2Ox\");\nparcelRequire(\"bbvsM\");\nparcelRequire(\"5xtVg\");\n\n})();\n//# sourceMappingURL=shopping-list.e7250b78.js.map\n","import './js/theme-switcher';\nimport './js/mobile-menu';\nimport './js/main-shop-list';\nimport './js/support-ukraine';\nimport \"./js/shopping-list\"\nimport './js/auth-modal.js';\nimport './js/auth.js';\nimport './js/user-bar';\nimport './js/scrol-to-top.js';\nimport './js/modal.js';\n","import axios from \"axios\";\n// import { getAuth, onAuthStateChanged } from \"firebase/auth\";\n// import { getDatabase, ref, get, post, child, push, update, forceLongPolling } from \"firebase/database\";\n// const auth = getAuth();\n// onAuthStateChanged(auth, (user) => {\n//   if (user) {\n//     // User is signed in, see docs for a list of available properties\n//     // https://firebase.google.com/docs/reference/js/auth.user\n//     const uid = user.uid;\n//     const email = user.email;\n//     const photoURL = user.photoURL;\n//     const emailVerified = user.emailVerified;\n//       readBookData(uid)\n//       serviceBooks(uid);\n//     // ...\n//   } else {\n//     // User is signed out\n//     // ...\n//   }\n// });\n\n// function readBookData(userId) {\n//   const dbRef = ref(getDatabase(), `users/${userId}/books`);\n//   get(dbRef).then((snapshot) => {\n//     if (snapshot.exists()) {\n//       const booksData = snapshot.val();\n//         console.log((Object.values(booksData)));\n//         return booksData\n//     } else {\n//         console.log(\"No shopping list data available\");\n//         return null\n//     }\n//   }).catch((error) => {\n//     console.error(error);\n//   });\n// }\n\n\n// const refs = {\n//     defaultPage : document.querySelector('.default-message'),\n//     showElement: document.querySelector('.js-container'),\n//     shopLink: document.querySelector('.shopping-link')\n// }\n\n\n// async function serviceBooks(userId) {\n//     try {\n\n//         const BASE_URL = 'https://books-backend.p.goit.global/books/'\n//          const { data: bookIds } = await readBookData(userId);\n\n//           if (!bookIds || bookIds.length === 0) {\n//       refs.defaultPage.classList.remove('.hidden');\n//       return; \n//     }\n\n        \n//             const books = []\n//      for (const bookId of bookId) {\n\n//         const { data } = await axios.get(`${BASE_URL}${id}`)\n//         books.push(bookData)\n\n//          refs.defaultPage.classList.add('.hidden')\n//          refs.showElement.insertAdjacentElement(\"beforeend\",createMarkup(books))\n\n//    }       \n        \n//     }\n//     catch (error) {\n//         console.log(error.message)\n//         throw new Error(error.message, 'Something went wrong')\n        \n//    }\n\n// }\n       \n\n \n \n\n\n// // console.log(serviceBooks());\n\n\n// function createMarkup(arr) {\n//     return arr.map(({book_image,title,description,author,buy_links: { name, url},_id}) => {\n        \n\n//         return `               \n//         <div class=\"main\">\n\n//         <ul class=\"list-cards\">\n     \n         \n//             <li class=\"js-item list-item\">\n           \n//                 <div class=\"image-container\">\n\n//                     <img src=\"${book_image}\" alt=\"${title}\" id=\"${_id}\">\n                    \n//                 <div class=\"quick-view\">\n//                      Quick View\n//             </div>\n//                 </div>  \n\n//                 <div class=\"content-container\">\n//                     <h2 class=\"card-title\">${title}</h2>\n//                     <p class=\"card-text\">${description}</p>   //тут має бути категорія\n                    \n//                     <p class=\"main-card-text\">${description}</p>\n                    \n//                     <p class=\"text-author\">${author}</p>\n \n//                      <button type=\"button\" class=\"btn-delete\">\n//                         <svg class=\"icon-trash\">\n//                             <use href=\"./images/icons.svg#icon-trash\"></use>\n//                           </svg>\n//                         </button>  \n//                      </div>\n           \n//             </li>\n//         </ul>\n       \n//                 <ul class=\"list-icons\">\n//                 <li class=\"item-images\">\n//                     <a href=\"${url}\" class=\"item-link\">\n//                         <img src=\"./images/png_amazon.png\" alt=\"${name}\">\n//                         <span class=\"underline\"></span>\n//                     </a>\n//                 </li>\n//                 <li class=\"item-images\">\n//                     <a href=\"${url}\" class=\"item-link\">\n//                         <img src=\"./images/pngyellow.png\" alt=\"${name}\">\n//                         <span class=\"underline\"></span>\n//                     </a>\n//                 </li>\n//                 <li class=\"item-images\">\n//                     <a href=\"${url}\" class=\"item-link\">\n//                         <img src=\"./images/pngbook.png\" alt=\"${name}\">\n//                         <span class=\"underline\"></span>\n//                     </a>\n//                 </li>\n            \n//             </ul>\n       \n//         </div> `\n//     }).join('')\n// }\n\n\n// fetch('https://books-backend.p.goit.global/books/643282b1e85766588626a0ae').then(resp => resp.json()).\n// then( data => {\n//     console.log(data)\n//     createMarkup(data)\n// }).\n// catch(err => console.log(err))\n\n//* При переході на сторінку Shopping list у блоці з переліком книг відмальовуються книги,\n//* що були додані до нього користувачем і зберігалися\n//* у localStorage.Якщо таких книг не знайдено, необхідно показати відповідне повідомлення користувачу\n\n\n\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","self","window","global","id","exports","init","module","call","err","Error","code","register"],"version":3,"file":"shopping-list.e7250b78.js.map"}